---
const {id} = Astro.props;
---
<div class="flex flex-row justify-center">
    <div class="relative text-lg font-bold w-36 p-2 bg-stone-300 text-center" style="box-shadow: 5px 5px 0 0 #737373;">
        <slot/>
        <div class="absolute w-5 h-5 top-0 left-1/2 -translate-y-1/2 -translate-x-1/2 rounded-full overflow-hidden bg-stone-500">
            <div id={id} data-section-title-point
                 class="h-0 data-[state-active=true]:h-full transition-all bg-red-900 z-10"></div>
        </div>
    </div>
</div>
<script>
    import {getScrollContainer} from "../utils";
    import {SECTION_TITLE_HEADER_OFFSET, LINE_START_THRESHOLD} from "../constants";

    const scrollContainer = getScrollContainer()
    const menuItems = document.querySelectorAll('[data-menu-item]');
    const sectionTitlePoints = document.querySelectorAll('[data-section-title-point]');
    const lineStartThreshold = 400;

    function calculateLineHeight(sectionTitlePointPosition: number) {
        const startPosition = lineStartThreshold;
        const targetPosition = SECTION_TITLE_HEADER_OFFSET;

        const progressMade = startPosition - sectionTitlePointPosition;
        const progressNeeded = startPosition - targetPosition;
        const percentProgress = progressMade / progressNeeded;

        return Math.ceil(Math.max(Math.min(targetPosition * percentProgress, sectionTitlePointPosition), 0));
    }

    function handleMenuItemState() {
        const toggledSectionTitlePoints = document.querySelectorAll('[data-section-title-point][data-state-active=true]');
        const activeSectionTitlePoint = toggledSectionTitlePoints[toggledSectionTitlePoints.length - 1];

        menuItems.forEach((menuItem) => {
            if (activeSectionTitlePoint && menuItem.getAttribute('data-section-id') === activeSectionTitlePoint.getAttribute('id')) {
                menuItem.setAttribute('data-state-active', 'true');
            } else {
                menuItem.setAttribute('data-state-active', 'false');
            }
        });
    }

    function handleSectionTitlePointState() {
        sectionTitlePoints.forEach((sectionTitlePoint) => {
            const sectionTitlePointId = sectionTitlePoint.getAttribute('id');
            const sectionTitleLine = document.getElementById(`${sectionTitlePointId}-line`);
            const sectionTitlePointCoords = sectionTitlePoint.getBoundingClientRect();

            if (!sectionTitleLine) {
                throw new Error(`Element with id=${sectionTitlePointId}-line not found`);
            }

            if (sectionTitlePointCoords.y <= SECTION_TITLE_HEADER_OFFSET) {
                sectionTitlePoint.setAttribute('data-state-active', 'true');
            } else {
                sectionTitlePoint.setAttribute('data-state-active', 'false');
            }

            if (sectionTitlePointCoords.y <= LINE_START_THRESHOLD) {
                sectionTitleLine.style.height = `${calculateLineHeight(sectionTitlePointCoords.y)}px`;
            } else {
                sectionTitleLine.style.height = '0';
            }
        });
    }

    if (!scrollContainer) {
        throw new Error('Element with id=scroll-container not found');
    }

    scrollContainer.addEventListener('scroll', () => {
        handleSectionTitlePointState();
        handleMenuItemState();
    });
</script>
